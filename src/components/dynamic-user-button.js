/**
 * Dynamic User Button Component
 * Manages the user button display based on authentication state
 * Shows different states for visitors, regular users, and administrators
 *
 * @author Generated by GitHub Copilot
 * @version 1.0.0
 */

class DynamicUserButton {
    constructor() {
        this.currentUser = null;
        this.isAuthenticated = false;
        this.isAdmin = false;
        this.desktopButton = null;
        this.mobileButton = null;
        this.userMenu = null;
        this.isMenuOpen = false;
        
        this.init();
    }

    /**
     * Initialize the dynamic user button component
     */
    init() {
        console.log('Initializing DynamicUserButton...');
        
        // Wait for DOM if not ready
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => {
                this.initializeComponent();
            });
        } else {
            this.initializeComponent();
        }
    }

    /**
     * Initialize component after DOM is ready
     */
    initializeComponent() {
        this.findButtonElements();
        this.updateButtonState();
        this.setupEventListeners();
        console.log('DynamicUserButton initialized successfully');
    }

    /**
     * Find and cache button elements
     */
    findButtonElements() {
        this.desktopButton = document.getElementById('desktop-login-btn');
        this.mobileButton = document.getElementById('mobile-login-btn');
        
        if (!this.desktopButton || !this.mobileButton) {
            console.warn('DynamicUserButton: Some button elements not found. Desktop:', !!this.desktopButton, 'Mobile:', !!this.mobileButton);
        } else {
            console.log('DynamicUserButton: Button elements found successfully');
        }
    }

    /**
     * Update button state based on authentication status
     */
    updateButtonState() {
        // Check authentication status
        this.checkAuthenticationState();
        
        // Update both desktop and mobile buttons if they exist
        if (this.desktopButton) {
            this.updateButton(this.desktopButton);
        }
        
        if (this.mobileButton) {
            this.updateButton(this.mobileButton);
        }
    }

    /**
     * Check current authentication state
     */
    checkAuthenticationState() {
        if (window.authManager && window.authManager.isAuthenticated()) {
            this.isAuthenticated = true;
            this.currentUser = window.authManager.getCurrentUser();
            this.isAdmin = this.currentUser && this.currentUser.role === 'administrator';
        } else {
            this.isAuthenticated = false;
            this.currentUser = null;
            this.isAdmin = false;
        }
    }

    /**
     * Update individual button based on state
     * @param {HTMLElement} button - Button element to update
     */
    updateButton(button) {
        if (!button) return;

        if (!this.isAuthenticated) {
            // Visitor state - show login button
            this.setVisitorState(button);
        } else if (this.isAdmin) {
            // Administrator state - show admin button
            this.setAdminState(button);
        } else {
            // Regular user state - show user button
            this.setUserState(button);
        }
    }

    /**
     * Set button to visitor state
     * @param {HTMLElement} button - Button element
     */
    setVisitorState(button) {
        const icon = button.querySelector('i');
        const text = button.querySelector('.login-btn-text');
        
        if (icon) {
            icon.className = 'fas fa-user';
        }
        
        if (text) {
            text.textContent = 'ENTRAR';
        }

        button.className = 'login-btn ' + (button.classList.contains('mobile') ? 'mobile' : 'desktop');
        button.setAttribute('aria-label', 'Fazer login');
    }

    /**
     * Set button to regular user state
     * @param {HTMLElement} button - Button element
     */
    setUserState(button) {
        const icon = button.querySelector('i');
        const text = button.querySelector('.login-btn-text');
        
        if (icon) {
            icon.className = 'fas fa-user';
        }
        
        if (text) {
            text.innerHTML = `${this.currentUser.nome} <i class="fas fa-chevron-down user-menu-arrow"></i>`;
        }

        button.className = 'user-btn ' + (button.classList.contains('mobile') ? 'mobile' : 'desktop');
        button.setAttribute('aria-label', 'Menu do usu√°rio');
    }

    /**
     * Set button to administrator state
     * @param {HTMLElement} button - Button element
     */
    setAdminState(button) {
        const icon = button.querySelector('i');
        const text = button.querySelector('.login-btn-text');
        
        if (icon) {
            icon.className = 'fas fa-shield-alt';
        }
        
        if (text) {
            text.innerHTML = `${this.currentUser.nome} <i class="fas fa-chevron-down user-menu-arrow"></i>`;
        }

        button.className = 'admin-btn ' + (button.classList.contains('mobile') ? 'mobile' : 'desktop');
        button.setAttribute('aria-label', 'Menu do administrador');
    }

    /**
     * Setup event listeners
     */
    setupEventListeners() {
        // Desktop button click
        if (this.desktopButton) {
            this.desktopButton.addEventListener('click', (e) => this.handleButtonClick(e));
        }

        // Mobile button click
        if (this.mobileButton) {
            this.mobileButton.addEventListener('click', (e) => this.handleButtonClick(e));
        }

        // Listen for authentication state changes
        document.addEventListener('authStateChanged', () => {
            console.log('DynamicUserButton: Auth state changed, updating button...');
            this.updateButtonState();
        });

        // Close menu when clicking outside
        document.addEventListener('click', (e) => {
            if (this.isMenuOpen && !e.target.closest('.user-dropdown-menu') && 
                !e.target.closest('.user-btn') && !e.target.closest('.admin-btn')) {
                this.closeUserMenu();
            }
        });

        // Close menu with ESC key
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.isMenuOpen) {
                this.closeUserMenu();
            }
        });

        // Listen for resize events to reposition menu if open
        window.addEventListener('resize', () => {
            if (this.isMenuOpen && this.userMenu) {
                this.closeUserMenu(); // Close on resize for simplicity
            }
        });
    }

    /**
     * Handle button click
     * @param {Event} e - Click event
     */
    handleButtonClick(e) {
        e.preventDefault();
        e.stopPropagation();

        if (!this.isAuthenticated) {
            // Show login modal for visitors
            this.openLoginModal();
        } else {
            // Toggle user menu for authenticated users
            this.toggleUserMenu(e.target);
        }
    }

    /**
     * Open login modal
     */
    openLoginModal() {
        if (window.loginModal) {
            window.loginModal.open();
        } else {
            console.error('DynamicUserButton: Login modal not available');
        }
    }

    /**
     * Toggle user menu dropdown
     * @param {HTMLElement} buttonElement - Clicked button element
     */
    toggleUserMenu(buttonElement) {
        if (this.isMenuOpen) {
            this.closeUserMenu();
        } else {
            this.openUserMenu(buttonElement);
        }
    }

    /**
     * Open user menu dropdown
     * @param {HTMLElement} buttonElement - Button element that triggered the menu
     */
    openUserMenu(buttonElement) {
        this.closeUserMenu(); // Close any existing menu first

        // Create menu if it doesn't exist
        if (!this.userMenu) {
            this.createUserMenu();
        }

        // Update menu content based on user role
        this.updateMenuContent();

        // Position and show menu
        this.positionMenu(buttonElement);
        this.userMenu.style.display = 'block';
        this.isMenuOpen = true;

        // Add animation
        requestAnimationFrame(() => {
            this.userMenu.classList.add('show');
        });
    }

    /**
     * Close user menu dropdown
     */
    closeUserMenu() {
        if (this.userMenu && this.isMenuOpen) {
            this.userMenu.classList.remove('show');
            
            setTimeout(() => {
                if (this.userMenu) {
                    this.userMenu.style.display = 'none';
                }
            }, 200);
            
            this.isMenuOpen = false;
        }
    }

    /**
     * Create user menu dropdown element
     */
    createUserMenu() {
        const menuHTML = `
            <div id="user-dropdown-menu" class="user-dropdown-menu">
                <div class="user-dropdown-content">
                    <!-- Menu items will be inserted here -->
                </div>
            </div>
        `;

        // Remove existing menu if any
        const existingMenu = document.getElementById('user-dropdown-menu');
        if (existingMenu) {
            existingMenu.remove();
        }

        document.body.insertAdjacentHTML('beforeend', menuHTML);
        this.userMenu = document.getElementById('user-dropdown-menu');
    }

    /**
     * Update menu content based on user role
     */
    updateMenuContent() {
        if (!this.userMenu) return;

        const menuContent = this.userMenu.querySelector('.user-dropdown-content');
        let menuItems = [];

        if (this.isAdmin) {
            // Administrator menu items
            menuItems = [
                {
                    icon: 'fas fa-tachometer-alt',
                    label: 'Painel Administrativo',
                    action: 'dashboard',
                    class: 'admin-item'
                },
                {
                    icon: 'fas fa-user-cog',
                    label: 'Gerenciar conta',
                    action: 'account',
                    class: 'account-item'
                },
                {
                    icon: 'fas fa-sign-out-alt',
                    label: 'Sair',
                    action: 'logout',
                    class: 'logout-item'
                }
            ];
        } else {
            // Regular user menu items
            menuItems = [
                {
                    icon: 'fas fa-user-cog',
                    label: 'Gerenciar conta',
                    action: 'account',
                    class: 'account-item'
                },
                {
                    icon: 'fas fa-sign-out-alt',
                    label: 'Sair',
                    action: 'logout',
                    class: 'logout-item'
                }
            ];
        }

        menuContent.innerHTML = menuItems.map(item => `
            <button class="user-menu-item ${item.class}" data-action="${item.action}">
                <i class="${item.icon}"></i>
                <span>${item.label}</span>
            </button>
        `).join('');

        // Add event listeners to menu items
        menuItems.forEach((item, index) => {
            const button = menuContent.children[index];
            button.addEventListener('click', () => {
                this.handleMenuAction(item.action);
                this.closeUserMenu();
            });
        });
    }

    /**
     * Handle menu action
     * @param {string} action - Action to perform
     */
    handleMenuAction(action) {
        switch (action) {
            case 'dashboard':
                this.openAdminDashboard();
                break;
            case 'account':
                this.openAccountManagement();
                break;
            case 'logout':
                this.performLogout();
                break;
            default:
                console.warn(`DynamicUserButton: Unknown action: ${action}`);
        }
    }

    /**
     * Open admin dashboard
     */
    openAdminDashboard() {
        if (window.location.pathname.endsWith('admin.html')) {
            // Already on admin page
            return;
        }
        window.location.href = 'admin.html';
    }

    /**
     * Open account management (placeholder)
     */
    openAccountManagement() {
        // TODO: Implement account management modal
        this.showNotification('Funcionalidade de gerenciamento de conta em desenvolvimento', 'info');
    }

    /**
     * Perform logout
     */
    performLogout() {
        if (window.authManager && window.authManager.logout) {
            window.authManager.logout();
            this.showNotification('Logout realizado com sucesso', 'success');
            
            // Update button state and reload page
            setTimeout(() => {
                window.location.reload();
            }, 800);
        } else {
            console.error('DynamicUserButton: AuthManager not available for logout');
        }
    }

    /**
     * Position menu relative to button
     * @param {HTMLElement} buttonElement - Button element
     */
    positionMenu(buttonElement) {
        if (!this.userMenu || !buttonElement) return;

        const buttonRect = buttonElement.getBoundingClientRect();
        const menuWidth = 220;
        const menuHeight = this.isAdmin ? 140 : 100;
        const viewport = {
            width: window.innerWidth,
            height: window.innerHeight
        };

        let left = buttonRect.left;
        let top = buttonRect.bottom + 8;

        // For mobile, center the menu more appropriately
        if (viewport.width <= 768) {
            left = Math.max(8, Math.min(buttonRect.left, viewport.width - menuWidth - 8));
        } else {
            // Desktop: adjust if menu would go off screen
            if (left + menuWidth > viewport.width) {
                left = buttonRect.right - menuWidth;
            }
        }

        // Adjust vertical position if menu would go off screen
        if (top + menuHeight > viewport.height) {
            top = buttonRect.top - menuHeight - 8;
        }

        // Ensure menu stays within viewport
        left = Math.max(8, Math.min(left, viewport.width - menuWidth - 8));
        top = Math.max(8, Math.min(top, viewport.height - menuHeight - 8));

        this.userMenu.style.left = `${left}px`;
        this.userMenu.style.top = `${top}px`;
    }

    /**
     * Show notification message
     * @param {string} message - Message to show
     * @param {string} type - Type of notification (success, error, info, warning)
     */
    showNotification(message, type = 'info') {
        if (window.infoPanelManager && window.infoPanelManager.showNotification) {
            window.infoPanelManager.showNotification(message, type);
        } else {
            console.log(`${type.toUpperCase()}: ${message}`);
        }
    }

    /**
     * Refresh the button state (called externally when auth state changes)
     */
    refresh() {
        this.updateButtonState();
    }
}

// Initialize globally
window.dynamicUserButton = new DynamicUserButton();
